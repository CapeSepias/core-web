{"version":3,"sources":["collection_spec.js"],"names":[],"mappings":"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","file":"angular2/test/facade/collection_spec.es6","sourcesContent":["import {describe, it, expect, beforeEach, ddescribe, iit, xit}\n  from 'angular2/test_lib';\n\nimport {List, ListWrapper} from 'angular2/src/facade/collection';\n\nexport function main() {\n  describe('ListWrapper', () => {\n    var l: List;\n\n    describe('splice', () => {\n      it('should remove sublist of given length and return it', () => {\n        var list = [1, 2, 3, 4, 5, 6];\n        expect(ListWrapper.splice(list, 1, 3)).toEqual([2, 3, 4]);\n        expect(list).toEqual([1, 5, 6]);\n      });\n\n      it('should support negative start', () => {\n        var list = [1, 2, 3, 4, 5, 6];\n        expect(ListWrapper.splice(list, -5, 3)).toEqual([2, 3, 4]);\n        expect(list).toEqual([1, 5, 6]);\n      });\n    });\n\n    describe('fill', () => {\n      beforeEach(() => {\n        l = [1, 2, 3, 4];\n      });\n\n      it('should fill the whole list if neither start nor end are specified', () => {\n        ListWrapper.fill(l, 9);\n        expect(l).toEqual([9, 9, 9, 9]);\n      });\n\n      it('should fill up to the end if end is not specified', () => {\n        ListWrapper.fill(l, 9, 1);\n        expect(l).toEqual([1, 9, 9, 9]);\n      });\n\n      it('should support negative start', () => {\n        ListWrapper.fill(l, 9, -1);\n        expect(l).toEqual([1, 2, 3, 9]);\n      });\n\n      it('should support negative end', () => {\n        ListWrapper.fill(l, 9, -2, -1);\n        expect(l).toEqual([1, 2, 9, 4]);\n      });\n    });\n\n    describe('slice', () => {\n      beforeEach(() => {\n        l = [1, 2, 3, 4];\n      });\n\n      it('should return the whole list if neither start nor end are specified', () => {\n        expect(ListWrapper.slice(l)).toEqual([1, 2, 3, 4]);\n      });\n\n      it('should return up to the end if end is not specified', () => {\n        expect(ListWrapper.slice(l, 1)).toEqual([2, 3, 4]);\n      });\n\n      it('should support negative start', () => {\n        expect(ListWrapper.slice(l, -1)).toEqual([4]);\n      });\n\n      it('should support negative end', () => {\n        expect(ListWrapper.slice(l, -3, -1)).toEqual([2, 3]);\n      });\n    });\n });\n}\n"]}