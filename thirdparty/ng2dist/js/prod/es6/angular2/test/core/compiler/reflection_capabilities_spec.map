{"version":3,"sources":["reflection_capabilities_spec.js"],"names":[],"mappings":"AAAA,KAAO,EAAC,SAAQ;AAAG,SAAO;AAAG,GAAC;AAAG,IAAE;AAAG,OAAK;AAAG,WAAS;AAAG,WAAS,CAAC,KAAO,oBAAkB,CAAC;AAC9F,KAAO,EAAC,sBAAqB,CAAC,KAAO,kDAAgD,CAAC;AACtF,KAAO,EAAC,SAAQ;AAAG,OAAK;AAAG,MAAI,CAAC,KAAO,2BAAyB,CAAC;AAEjE,KAAO,SAAS,KAAG,CAAE,AAAD,CAAG;AACrB,AAAI,IAAA,CAAA,EAAC,CAAC;AACN,WAAS,AAAC,CAAC,CAAC,AAAD,IAAM;AACf,KAAC,EAAI,IAAI,uBAAqB,AAAC,EAAC,CAAC;EACnC,CAAC,CAAC;AAEF,SAAS,YAAU,CAAE,QAAO,CAAG,CAAA,GAAE,CAAG;AAElC,OAAI,CAAC,UAAS,CAAG;AACf,WAAK,QAAQ,EAAI,EACf,aAAY,CAAG,EAAC,GAAE,CAAG,CAAA,SAAQ,IAAM;AACjC,eAAO,CAAA,CAAC,SAAQ,GAAK,IAAE,CAAC,EAAI,CAAA,QAAO,CAAE,GAAE,CAAC,EAAI,KAAG,CAAC;QAClD,CACF,CAAA;IACF;AAAA,EACF;AAAA,AAEA,SAAS,2BAAyB,CAAE,WAAU,CAAG;AAC/C,SAAK,AAAC,CAAC,WAAU,CAAE,CAAA,CAAC,CAAC,iBAAiB,AAAC,CAAC,SAAQ,CAAC,CAAC;AAClD,SAAK,AAAC,CAAC,WAAU,CAAE,CAAA,CAAC,CAAC,iBAAiB,AAAC,CAAC,SAAQ,CAAC,CAAC;EACpD;AAAA,AAEA,SAAS,0BAAwB,CAAE,UAAS,CAAG;AAC7C,SAAK,AAAC,CAAC,UAAS,CAAE,CAAA,CAAC,OAAO,CAAC,KAAK,AAAC,CAAC,CAAA,CAAC,CAAC;AACpC,SAAK,AAAC,CAAC,UAAS,CAAE,CAAA,CAAC,CAAE,CAAA,CAAC,CAAC,QAAQ,AAAC,CAAC,EAAC,CAAC,CAAC;AACpC,SAAK,AAAC,CAAC,UAAS,CAAE,CAAA,CAAC,CAAE,CAAA,CAAC,CAAC,iBAAiB,AAAC,CAAC,QAAO,CAAC,CAAC;AAEnD,SAAK,AAAC,CAAC,UAAS,CAAE,CAAA,CAAC,OAAO,CAAC,KAAK,AAAC,CAAC,CAAA,CAAC,CAAC;AACpC,SAAK,AAAC,CAAC,UAAS,CAAE,CAAA,CAAC,CAAE,CAAA,CAAC,CAAC,QAAQ,AAAC,CAAC,EAAC,CAAC,CAAC;AAGpC,SAAK,AAAC,CAAC,UAAS,CAAE,CAAA,CAAC,OAAO,CAAC,KAAK,AAAC,CAAC,CAAA,CAAC,CAAC;AACpC,SAAK,AAAC,CAAC,UAAS,CAAE,CAAA,CAAC,CAAE,CAAA,CAAC,CAAC,iBAAiB,AAAC,CAAC,QAAO,CAAC,CAAC;AAEnD,SAAK,AAAC,CAAC,UAAS,CAAE,CAAA,CAAC,OAAO,CAAC,KAAK,AAAC,CAAC,CAAA,CAAC,CAAC;EACtC;AAAA,AAEA,SAAO,AAAC,CAAC,yBAAwB,CAAG,EAAC,AAAD,IAAM;AACxC,KAAC,AAAC,CAAC,wDAAuD,CAAG,EAAC,AAAD,IAAM;AACjE,+BAAyB,AAAC,CAAC,EAAC,YAAY,AAAC,CAAC,SAAQ,CAAC,CAAC,CAAC;IACvD,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,2DAA0D,CAAG,EAAC,AAAD,IAAM;AACpE,8BAAwB,AAAC,CAAC,EAAC,WAAW,AAAC,CAAC,SAAQ,CAAC,CAAC,CAAC;IACrD,CAAC,CAAC;AAKF,KAAC,AAAC,CAAC,oDAAmD,CAAG,EAAC,AAAD,IAAM;AAC7D,SAAI,UAAS;AAAG,eAAM;AAAA,AACtB,gBAAU,AAAC,CAAC,uBAAsB,CAAG,aAAW,CAAC,CAAC;AAClD,+BAAyB,AAAC,CAAC,EAAC,YAAY,AAAC,CAAC,YAAW,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,wDAAuD,CAAG,EAAC,AAAD,IAAM;AACjE,SAAI,UAAS;AAAG,eAAM;AAAA,AACtB,gBAAU,AAAC,CAAC,uBAAsB,CAAG,aAAW,CAAC,CAAC;AAClD,8BAAwB,AAAC,CAAC,EAAC,WAAW,AAAC,CAAC,YAAW,CAAC,CAAC,CAAC;IACxD,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAAA,AAEA,IAAM,UAAQ;AACZ,AACA,YAAU,CAAE,AAAD,CAAG,GAAC;AAAA,AACjB;AAtEA,KAAK,eAAe,AAAC,0BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cAmEvB,MAAI,AAAC,EAAC,EAnEwC;EAAC,CAAC,CAAC,CAAC;AAuErD,IAAM,UAAQ;AACZ,AACA,YAAU,CAAE,AAAD,CAAG,GAAC;AAAA,AACjB;AA3EA,KAAK,eAAe,AAAC,0BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cAwEvB,MAAI,AAAC,EAAC,EAxEwC;EAAC,CAAC,CAAC,CAAC;AA6ErD,IAAM,SAAO;AACX,AACA,YAAU,CAAE,AAAD,CAAG,GAAC;AAAA,AACjB;AAjFA,KAAK,eAAe,AAAC,yBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cA8EvB,MAAI,AAAC,EAAC,EA9EwC;EAAC,CAAC,CAAC,CAAC;AAkFrD,IAAM,GAAC,GAAG;AACV,IAAM,GAAC,GAAG;AAIV,IAAM,UAAQ;AACZ,YAAU,CAAE,AAAY,CAAA,AAAI,CAAG,CAAA,CAAA,AAAI,CAAe,CAAA,CAAA,CAAG,CAAA,CAAA,CAAG,GAAC;AAAA,AAC3D;AA1FA,KAAK,eAAe,AAAC,0BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cAqFzB,UAAQ,AAAC,EAAC,KACV,UAAQ,AAAC,EAAC,EAtFsC;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,yBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAwFG,EAAC,KAAf,SAAO,AAAC,EAAC,IAAY,EAAC,OAAI,SAAO,AAAC,EAAC,OAxFD;EAAC,CAAC,CAAC,CAAC;AA4FrD,AAAI,EAAA,CAAA,uBAAsB,EAAI;AAC5B,cAAY,CAAG,EAAC,GAAI,UAAQ,AAAC,EAAC,CAAG,IAAI,UAAQ,AAAC,EAAC,CAAC;AAChD,aAAW,CAAG,EAAC,GAAI,SAAO,AAAC,EAAC,CAAG,KAAG,CAAG,IAAI,SAAO,AAAC,EAAC,CAAC;AACnD,oBAAkB,CAAG,EAAC,EAAC,CAAG,GAAC,CAAG,OAAK,CAAG,OAAK,CAAC;AAAA,AAC9C,CAAC;AACD,IAAM,aAAW,GAAG;AACpB","file":"angular2/test/core/compiler/reflection_capabilities_spec.es6","sourcesContent":["import {ddescribe, describe, it, iit, expect, beforeEach, IS_DARTIUM} from 'angular2/test_lib';\nimport {ReflectionCapabilities} from 'angular2/src/reflection/reflection_capabilities';\nimport {isPresent, global, CONST} from 'angular2/src/facade/lang';\n\nexport function main() {\n  var rc;\n  beforeEach(() => {\n    rc = new ReflectionCapabilities();\n  });\n\n  function mockReflect(mockData, cls) {\n    // This only makes sense for JS, but Dart passes trivially too.\n    if (!IS_DARTIUM) {\n      global.Reflect = {\n        'getMetadata': (key, targetCls) => {\n          return (targetCls == cls) ? mockData[key] : null;\n        }\n      }\n    }\n  }\n\n  function assertTestClassAnnotations(annotations) {\n    expect(annotations[0]).toBeAnInstanceOf(ClassDec1);\n    expect(annotations[1]).toBeAnInstanceOf(ClassDec2);\n  }\n\n  function assertTestClassParameters(parameters) {\n    expect(parameters[0].length).toBe(2);\n    expect(parameters[0][0]).toEqual(P1);\n    expect(parameters[0][1]).toBeAnInstanceOf(ParamDec);\n\n    expect(parameters[1].length).toBe(1);\n    expect(parameters[1][0]).toEqual(P2);\n\n\n    expect(parameters[2].length).toBe(1);\n    expect(parameters[2][0]).toBeAnInstanceOf(ParamDec);\n\n    expect(parameters[3].length).toBe(0);\n  }\n\n  describe('reflection capabilities', () => {\n    it('can read out class annotations through annotations key', () => {\n      assertTestClassAnnotations(rc.annotations(TestClass));\n    });\n\n    it('can read out parameter annotations through parameters key', () => {\n      assertTestClassParameters(rc.parameters(TestClass));\n    });\n\n    // Mocking in the tests below is needed because the test runs through Traceur.\n    // After the switch to TS the setup will have to change, where the direct key\n    // access will be mocked, and the tests below will be direct.\n    it('can read out class annotations though Reflect APIs', () => {\n      if (IS_DARTIUM) return;\n      mockReflect(mockDataForTestClassDec, TestClassDec);\n      assertTestClassAnnotations(rc.annotations(TestClassDec));\n    });\n\n    it('can read out parameter annotations though Reflect APIs', () => {\n      if (IS_DARTIUM) return;\n      mockReflect(mockDataForTestClassDec, TestClassDec);\n      assertTestClassParameters(rc.parameters(TestClassDec));\n    });\n  });\n}\n\nclass ClassDec1 {\n  @CONST()\n  constructor() {}\n}\n\nclass ClassDec2 {\n  @CONST()\n  constructor() {}\n}\n\n\nclass ParamDec {\n  @CONST()\n  constructor() {}\n}\n\nclass P1 {}\nclass P2 {}\n\n@ClassDec1()\n@ClassDec2()\nclass TestClass {\n  constructor(@ParamDec() a: P1, b: P2, @ParamDec() c, d) {}\n}\n\n// Mocking the data stored in global.Reflect as if TS was compiling TestClass above.\nvar mockDataForTestClassDec = {\n  'annotations': [new ClassDec1(), new ClassDec2()],\n  'parameters': [new ParamDec(), null, new ParamDec()],\n  'design:paramtypes': [P1, P2, Object, Object]\n};\nclass TestClassDec {}\n"]}