{"version":3,"sources":["convert_spec.js"],"names":[],"mappings":"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","file":"angular2/test/render/dom/convert_spec.es6","sourcesContent":["import {MapWrapper} from 'angular2/src/facade/collection';\nimport {DirectiveMetadata} from 'angular2/src/render/api';\nimport {directiveMetadataFromMap, directiveMetadataToMap} from\n    'angular2/src/render/dom/convert';\nimport {describe, expect, it} from 'angular2/test_lib';\n\nexport function main() {\n  describe('convert', () => {\n    it('directiveMetadataToMap', () => {\n      var someComponent = new DirectiveMetadata({\n        compileChildren: false,\n        hostListeners: MapWrapper.createFromPairs([['listenKey', 'listenVal']]),\n        hostProperties:\n            MapWrapper.createFromPairs([['hostPropKey', 'hostPropVal']]),\n        id: 'someComponent',\n        properties: MapWrapper.createFromPairs([['propKey', 'propVal']]),\n        readAttributes: ['read1', 'read2'],\n        selector: 'some-comp',\n        type: DirectiveMetadata.COMPONENT_TYPE\n      });\n      var map = directiveMetadataToMap(someComponent);\n      expect(MapWrapper.get(map, 'compileChildren')).toEqual(false);\n      expect(MapWrapper.get(map, 'hostListeners')).toEqual(\n          MapWrapper.createFromPairs([['listenKey', 'listenVal']]));\n      expect(MapWrapper.get(map, 'hostProperties')).toEqual(\n          MapWrapper.createFromPairs([['hostPropKey', 'hostPropVal']]));\n      expect(MapWrapper.get(map, 'id')).toEqual('someComponent');\n      expect(MapWrapper.get(map, 'properties')).toEqual(\n          MapWrapper.createFromPairs([['propKey', 'propVal']]));\n      expect(MapWrapper.get(map, 'readAttributes')).toEqual(['read1', 'read2']);\n      expect(MapWrapper.get(map, 'selector')).toEqual('some-comp');\n      expect(MapWrapper.get(map, 'type')).toEqual(\n          DirectiveMetadata.COMPONENT_TYPE);\n    });\n\n    it('mapToDirectiveMetadata', () => {\n      var map = MapWrapper.createFromPairs([\n        ['compileChildren', false],\n        ['hostListeners', MapWrapper.createFromPairs([['testKey', 'testVal']])],\n        ['hostProperties',\n            MapWrapper.createFromPairs([['hostPropKey', 'hostPropVal']])],\n        ['id', 'testId'],\n        ['properties', MapWrapper.createFromPairs([['propKey', 'propVal']])],\n        ['readAttributes', ['readTest1', 'readTest2']],\n        ['selector', 'testSelector'],\n        ['type', DirectiveMetadata.DIRECTIVE_TYPE]\n      ]);\n      var meta = directiveMetadataFromMap(map);\n      expect(meta.compileChildren).toEqual(false);\n      expect(meta.hostListeners).toEqual(\n          MapWrapper.createFromPairs([['testKey', 'testVal']]));\n      expect(meta.hostProperties).toEqual(\n          MapWrapper.createFromPairs([['hostPropKey', 'hostPropVal']]));\n      expect(meta.id).toEqual('testId');\n      expect(meta.properties).toEqual(\n          MapWrapper.createFromPairs([['propKey', 'propVal']]));\n      expect(meta.readAttributes).toEqual(['readTest1', 'readTest2']);\n      expect(meta.selector).toEqual('testSelector');\n      expect(meta.type).toEqual(DirectiveMetadata.DIRECTIVE_TYPE);\n    });\n  });\n}\n"]}