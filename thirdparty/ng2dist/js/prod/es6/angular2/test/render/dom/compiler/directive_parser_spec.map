{"version":3,"sources":["directive_parser_spec.js"],"names":[],"mappings":"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","file":"angular2/test/render/dom/compiler/directive_parser_spec.es6","sourcesContent":["import {describe, beforeEach, it, xit, expect, iit, ddescribe, el} from 'angular2/test_lib';\nimport {isPresent, isBlank, assertionsEnabled} from 'angular2/src/facade/lang';\nimport {ListWrapper, MapWrapper, StringMapWrapper} from 'angular2/src/facade/collection';\nimport {DirectiveParser} from 'angular2/src/render/dom/compiler/directive_parser';\nimport {CompilePipeline} from 'angular2/src/render/dom/compiler/compile_pipeline';\nimport {CompileStep} from 'angular2/src/render/dom/compiler/compile_step';\nimport {CompileElement} from 'angular2/src/render/dom/compiler/compile_element';\nimport {CompileControl} from 'angular2/src/render/dom/compiler/compile_control';\nimport {ViewDefinition, DirectiveMetadata} from 'angular2/src/render/api';\nimport {Lexer, Parser} from 'angular2/change_detection';\n\nexport function main() {\n  describe('DirectiveParser', () => {\n    var parser, annotatedDirectives;\n\n    beforeEach( () => {\n      annotatedDirectives = [\n        someComponent,\n        someComponent2,\n        someDirective,\n        someDirectiveIgnoringChildren,\n        decoratorWithMultipleAttrs,\n        someDirectiveWithProps,\n        someDirectiveWithHostProperties,\n        someDirectiveWithEvents,\n        someDirectiveWithGlobalEvents\n      ];\n      parser = new Parser(new Lexer());\n    });\n\n    function createPipeline(propertyBindings = null, directives = null) {\n      if (isBlank(directives)) directives = annotatedDirectives;\n\n      return new CompilePipeline([\n        new MockStep( (parent, current, control) => {\n          if (isPresent(propertyBindings)) {\n            StringMapWrapper.forEach(propertyBindings, (ast, name) => {\n              current.bindElement().bindProperty(name, ast);\n            });\n          }\n        }),\n        new DirectiveParser(parser, directives)\n      ]);\n    }\n\n    function process(el, propertyBindings = null, directives = null) {\n      var pipeline = createPipeline(propertyBindings, directives);\n      return ListWrapper.map(pipeline.process(el), (ce) => ce.inheritedElementBinder );\n    }\n\n    it('should not add directives if they are not used', () => {\n      var results = process(el('<div></div>'));\n      expect(results[0]).toBe(null);\n    });\n\n    it('should detect directives in attributes', () => {\n      var results = process(el('<div some-decor></div>'));\n      expect(results[0].directives[0].directiveIndex).toBe(\n        annotatedDirectives.indexOf(someDirective)\n      );\n    });\n\n    it('should detect directives with multiple attributes', () => {\n      var results = process(el('<input type=text control=one></input>'));\n      expect(results[0].directives[0].directiveIndex).toBe(\n        annotatedDirectives.indexOf(decoratorWithMultipleAttrs)\n      );\n    });\n\n    it('should compile children by default', () => {\n      var results = createPipeline().process(el('<div some-decor></div>'));\n      expect(results[0].compileChildren).toEqual(true);\n    });\n\n    it('should stop compiling children when specified in the directive config', () => {\n      var results = createPipeline().process(el('<div some-decor-ignoring-children></div>'));\n      expect(results[0].compileChildren).toEqual(false);\n    });\n\n    it('should bind directive properties from bound properties', () => {\n      var results = process(\n        el('<div some-decor-props></div>'),\n        {\n          'elProp': parser.parseBinding('someExpr', '')\n        }\n      );\n      var directiveBinding = results[0].directives[0];\n      expect(MapWrapper.get(directiveBinding.propertyBindings, 'dirProp').source)\n        .toEqual('someExpr');\n    });\n\n    it('should bind directive properties with pipes', () => {\n      var results = process(\n        el('<div some-decor-props></div>'),\n        {\n          'elProp': parser.parseBinding('someExpr', '')\n        }\n      );\n      var directiveBinding = results[0].directives[0];\n      var pipedProp = MapWrapper.get(directiveBinding.propertyBindings, 'doubleProp');\n      var simpleProp = MapWrapper.get(directiveBinding.propertyBindings, 'dirProp');\n      expect(pipedProp.ast.name).toEqual('double');\n      expect(pipedProp.ast.exp).toEqual(simpleProp.ast);\n      expect(simpleProp.source).toEqual('someExpr');\n    });\n\n    it('should bind directive properties from attribute values', () => {\n      var results = process(\n        el('<div some-decor-props el-prop=\"someValue\"></div>')\n      );\n      var directiveBinding = results[0].directives[0];\n      var simpleProp = MapWrapper.get(directiveBinding.propertyBindings, 'dirProp');\n      expect(simpleProp.source).toEqual('someValue');\n    });\n\n    it('should bind host directive properties', () => {\n      var element = el('<input some-decor-with-host-props>');\n      var results = process(element);\n\n      var directiveBinding = results[0].directives[0];\n\n      var ast = MapWrapper.get(directiveBinding.hostPropertyBindings, 'hostProperty');\n      expect(ast.source).toEqual('dirProp');\n    });\n\n    it('should read attribute values', () => {\n      var element = el('<input some-decor-props some-attr=\"someValue\">');\n      var results = process(element);\n      expect(MapWrapper.get(results[0].readAttributes, 'some-attr')).toEqual('someValue');\n    });\n\n    it('should bind directive events', () => {\n      var results = process(\n        el('<div some-decor-events></div>')\n      );\n      var directiveBinding = results[0].directives[0];\n      expect(directiveBinding.eventBindings.length).toEqual(1);\n      var eventBinding = directiveBinding.eventBindings[0];\n      expect(eventBinding.fullName).toEqual('click');\n      expect(eventBinding.source.source).toEqual('doIt()');\n    });\n\n    it('should bind directive global events', () => {\n      var results = process(\n        el('<div some-decor-globalevents></div>')\n      );\n      var directiveBinding = results[0].directives[0];\n      expect(directiveBinding.eventBindings.length).toEqual(1);\n      var eventBinding = directiveBinding.eventBindings[0];\n      expect(eventBinding.fullName).toEqual('window:resize');\n      expect(eventBinding.source.source).toEqual('doItGlobal()');\n    });\n\n    //TODO: assertions should be enabled when running tests: https://github.com/angular/angular/issues/1340\n    describe('component directives', () => {\n      it('should save the component id', () => {\n        var results = process(\n          el('<some-comp></some-comp>')\n        );\n        expect(results[0].componentId).toEqual('someComponent');\n      });\n\n      it('should throw when the provided selector is not an element selector', () => {\n        expect( () => {\n          createPipeline(null, [componentWithNonElementSelector]);\n        }).toThrowError(`Component 'componentWithNonElementSelector' can only have an element selector, but had '[attr]'`);\n      });\n\n      it('should not allow multiple component directives on the same element', () => {\n         expect( () => {\n           process(\n             el('<some-comp></some-comp>'),\n             null,\n             [someComponent, someComponentDup]\n           );\n         }).toThrowError(new RegExp('Only one component directive is allowed per element' ));\n      });\n    });\n  });\n}\n\nclass MockStep extends CompileStep {\n  processClosure:Function;\n  constructor(process) {\n    super();\n    this.processClosure = process;\n  }\n  process(parent:CompileElement, current:CompileElement, control:CompileControl) {\n    this.processClosure(parent, current, control);\n  }\n}\n\nvar someComponent = new DirectiveMetadata({\n  selector: 'some-comp',\n  id: 'someComponent',\n  type: DirectiveMetadata.COMPONENT_TYPE\n});\n\nvar someComponentDup = new DirectiveMetadata({\n  selector: 'some-comp',\n  id: 'someComponentDup',\n  type: DirectiveMetadata.COMPONENT_TYPE\n});\n\nvar someComponent2 = new DirectiveMetadata({\n  selector: 'some-comp2',\n  id: 'someComponent2',\n  type: DirectiveMetadata.COMPONENT_TYPE\n});\n\nvar someDirective = new DirectiveMetadata({\n  selector: '[some-decor]',\n  type: DirectiveMetadata.DIRECTIVE_TYPE\n});\n\nvar someDirectiveIgnoringChildren = new DirectiveMetadata({\n  selector: '[some-decor-ignoring-children]',\n  compileChildren: false,\n  type: DirectiveMetadata.DIRECTIVE_TYPE\n\n});\n\nvar decoratorWithMultipleAttrs = new DirectiveMetadata({\n  selector: 'input[type=text][control]',\n  id: 'decoratorWithMultipleAttrs',\n  type: DirectiveMetadata.DIRECTIVE_TYPE\n});\n\nvar someDirectiveWithProps = new DirectiveMetadata({\n  selector: '[some-decor-props]',\n  properties: MapWrapper.createFromStringMap({\n    'dirProp': 'elProp',\n    'doubleProp': 'elProp | double'\n  }),\n  readAttributes: ['some-attr']\n});\n\nvar someDirectiveWithHostProperties = new DirectiveMetadata({\n  selector: '[some-decor-with-host-props]',\n  hostProperties: MapWrapper.createFromStringMap({\n    'dirProp': 'hostProperty'\n  })\n});\n\nvar someDirectiveWithEvents = new DirectiveMetadata({\n  selector: '[some-decor-events]',\n  hostListeners: MapWrapper.createFromStringMap({\n    'click': 'doIt()'\n  })\n});\n\nvar someDirectiveWithGlobalEvents = new DirectiveMetadata({\n  selector: '[some-decor-globalevents]',\n  hostListeners: MapWrapper.createFromStringMap({\n    'window:resize': 'doItGlobal()'\n  })\n});\n\nvar componentWithNonElementSelector = new DirectiveMetadata({\n  id: 'componentWithNonElementSelector',\n  selector: '[attr]',\n  type: DirectiveMetadata.COMPONENT_TYPE\n});\n"]}