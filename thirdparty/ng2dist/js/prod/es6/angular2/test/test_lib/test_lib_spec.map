{"version":3,"sources":["test_lib_spec.js"],"names":[],"mappings":"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","file":"angular2/test/test_lib/test_lib_spec.es6","sourcesContent":["import {describe, it, iit, ddescribe, expect, tick, async, SpyObject, beforeEach, proxy} from 'angular2/test_lib';\nimport {MapWrapper} from 'angular2/src/facade/collection';\nimport {IMPLEMENTS} from 'angular2/src/facade/lang';\n\nclass TestObj {\n  prop;\n  constructor(prop) {\n    this.prop = prop;\n  }\n  someFunc():number {\n    return -1;\n  }\n  someComplexFunc(a) {\n    return a;\n  }\n}\n\n@proxy\n@IMPLEMENTS(TestObj)\nclass SpyTestObj extends SpyObject {\n  constructor(){super(TestObj);}\n  noSuchMethod(m){return super.noSuchMethod(m)}\n}\n\nexport function main() {\n  describe('test_lib', () => {\n    describe('equality', () => {\n      it('should structurally compare objects', () => {\n        var expected = new TestObj(new TestObj({'one' : [1,2]}));\n        var actual = new TestObj(new TestObj({'one' : [1,2]}));\n        var falseActual = new TestObj(new TestObj({'one' : [1,3]}));\n\n        expect(actual).toEqual(expected);\n        expect(falseActual).not.toEqual(expected);\n      });\n    });\n\n    describe('toEqual for Maps', () => {\n      it('should detect equality for same reference', () => {\n        var m1 = MapWrapper.createFromStringMap({'a': 1});\n        expect(m1).toEqual(m1);\n      });\n\n      it('should detect equality for same content', () => {\n        expect(MapWrapper.createFromStringMap({'a': 1})).toEqual(MapWrapper.createFromStringMap({'a': 1}));\n      });\n\n      it('should detect missing entries', () => {\n        expect(MapWrapper.createFromStringMap({'a': 1})).not.toEqual(MapWrapper.createFromStringMap({}));\n      });\n\n      it('should detect different values', () => {\n        expect(MapWrapper.createFromStringMap({'a': 1})).not.toEqual(MapWrapper.createFromStringMap({'a': 2}));\n      });\n\n      it('should detect additional entries', () => {\n        expect(MapWrapper.createFromStringMap({'a': 1})).not.toEqual(MapWrapper.createFromStringMap({'a': 1, 'b': 1}));\n      });\n    });\n\n    describe(\"spy objects\", () => {\n      var spyObj;\n\n      beforeEach(() => {\n        spyObj = new SpyTestObj();\n      });\n\n      it(\"should pass the runtime check\", () => {\n        var t:TestObj = spyObj;\n        expect(t).toBeDefined();\n      });\n\n      it(\"should return a new spy func with no calls\", () => {\n        expect(spyObj.spy(\"someFunc\")).not.toHaveBeenCalled();\n      });\n\n      it(\"should record function calls\", () => {\n        spyObj.spy(\"someFunc\").andCallFake((a,b) => {\n          return a + b\n        });\n\n        expect(spyObj.someFunc(1,2)).toEqual(3);\n        expect(spyObj.spy(\"someFunc\")).toHaveBeenCalledWith(1,2);\n      });\n\n      it(\"should match multiple function calls\", () => {\n        spyObj.someFunc(1,2);\n        spyObj.someFunc(3,4);\n        expect(spyObj.spy(\"someFunc\")).toHaveBeenCalledWith(1,2);\n        expect(spyObj.spy(\"someFunc\")).toHaveBeenCalledWith(3,4);\n      });\n\n      it(\"should match using deep equality\", () => {\n        spyObj.someComplexFunc([1]);\n        expect(spyObj.spy(\"someComplexFunc\")).toHaveBeenCalledWith([1]);\n      });\n\n      it(\"should support stubs\", () => {\n        var s = SpyObject.stub({\"a\":1}, {\"b\":2});\n\n        expect(s.a()).toEqual(1);\n        expect(s.b()).toEqual(2);\n      });\n\n      it('should create spys for all methods', () => {\n        expect(() => spyObj.someFunc()).not.toThrow();\n      });\n\n      it('should create a default spy that does not fail for numbers', () => {\n        // Need to return null instead of undefined so that rtts assert does\n        // not fail...\n        expect(spyObj.someFunc()).toBe(null);\n      });\n    });\n  });\n}\n"]}