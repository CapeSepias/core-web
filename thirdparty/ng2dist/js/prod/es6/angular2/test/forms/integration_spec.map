{"version":3,"sources":["integration_spec.js"],"names":[],"mappings":"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","file":"angular2/test/forms/integration_spec.es6","sourcesContent":["import {\n  afterEach,\n  AsyncTestCompleter,\n  beforeEach,\n  ddescribe,\n  describe,\n  dispatchEvent,\n  el,\n  expect,\n  iit,\n  inject,\n  it,\n  xit\n} from 'angular2/test_lib';\nimport {DOM} from 'angular2/src/dom/dom_adapter';\n\nimport {Inject} from 'angular2/di';\n\nimport {Component, Directive} from 'angular2/src/core/annotations_impl/annotations';\nimport {View} from 'angular2/src/core/annotations_impl/view';\n\nimport {TestBed} from 'angular2/src/test_lib/test_bed';\n\nimport {ControlGroupDirective, ControlDirective, Control, ControlGroup, RequiredValidatorDirective, CheckboxControlValueAccessor,\n  DefaultValueAccessor, Validators} from 'angular2/forms';\n\nexport function main() {\n  describe(\"integration tests\", () => {\n\n    it(\"should initialize DOM elements with the given form object\",\n      inject([TestBed, AsyncTestCompleter], (tb, async) => {\n      var ctx = new MyComp(new ControlGroup({\n        \"login\": new Control(\"loginValue\")\n      }));\n\n      var t = `<div [control-group]=\"form\">\n              <input type=\"text\" control=\"login\">\n            </div>`;\n\n      tb.createView(MyComp, {context: ctx, html: t}).then((view) => {\n        view.detectChanges();\n        var input = view.querySelector(\"input\");\n        expect(input.value).toEqual(\"loginValue\");\n        async.done();\n      });\n    }));\n\n    it(\"should update the control group values on DOM change\",\n      inject([TestBed, AsyncTestCompleter], (tb, async) => {\n      var form = new ControlGroup({\n        \"login\": new Control(\"oldValue\")\n      });\n      var ctx = new MyComp(form);\n\n      var t = `<div [control-group]=\"form\">\n                <input type=\"text\" control=\"login\">\n              </div>`;\n\n      tb.createView(MyComp, {context: ctx, html: t}).then((view) => {\n        view.detectChanges();\n        var input = view.querySelector(\"input\");\n\n        input.value = \"updatedValue\";\n        dispatchEvent(input, \"change\");\n\n        expect(form.value).toEqual({\"login\": \"updatedValue\"});\n        async.done();\n      });\n    }));\n\n    it(\"should work with single controls\", inject([TestBed, AsyncTestCompleter], (tb, async) => {\n      var control = new Control(\"loginValue\");\n      var ctx = new MyComp(control);\n\n      var t = `<div><input type=\"text\" [control]=\"form\"></div>`;\n\n      tb.createView(MyComp, {context: ctx, html: t}).then((view) => {\n        view.detectChanges();\n        var input = view.querySelector(\"input\")\n        expect(input.value).toEqual(\"loginValue\");\n\n        input.value = \"updatedValue\";\n        dispatchEvent(input, \"change\");\n\n        expect(control.value).toEqual(\"updatedValue\");\n        async.done();\n      });\n    }));\n\n    it(\"should update DOM elements when rebinding the control group\",\n      inject([TestBed, AsyncTestCompleter], (tb, async) => {\n      var form = new ControlGroup({\n        \"login\": new Control(\"oldValue\")\n      });\n      var ctx = new MyComp(form);\n\n      var t = `<div [control-group]=\"form\">\n              <input type=\"text\" control=\"login\">\n            </div>`;\n\n      tb.createView(MyComp, {context: ctx, html: t}).then((view) => {\n        view.detectChanges();\n        ctx.form = new ControlGroup({\n          \"login\": new Control(\"newValue\")\n        });\n        view.detectChanges();\n\n        var input = view.querySelector(\"input\")\n        expect(input.value).toEqual(\"newValue\");\n        async.done();\n      });\n    }));\n\n    it(\"should update DOM element when rebinding the control name\",\n      inject([TestBed, AsyncTestCompleter], (tb, async) => {\n      var ctx = new MyComp(new ControlGroup({\n        \"one\": new Control(\"one\"),\n        \"two\": new Control(\"two\")\n      }), \"one\");\n\n      var t = `<div [control-group]=\"form\">\n              <input type=\"text\" [control]=\"name\">\n            </div>`;\n\n      tb.createView(MyComp, {context: ctx, html: t}).then((view) => {\n        view.detectChanges();\n        var input = view.querySelector(\"input\")\n        expect(input.value).toEqual(\"one\");\n\n        ctx.name = \"two\";\n        view.detectChanges();\n\n        expect(input.value).toEqual(\"two\");\n        async.done();\n      });\n    }));\n\n    describe(\"different control types\", () => {\n      it(\"should support <input type=text>\", inject([TestBed, AsyncTestCompleter], (tb, async) => {\n        var ctx = new MyComp(new ControlGroup({\"text\": new Control(\"old\")}));\n\n        var t = `<div [control-group]=\"form\">\n                  <input type=\"text\" control=\"text\">\n                </div>`;\n\n        tb.createView(MyComp, {context: ctx, html: t}).then((view) => {\n          view.detectChanges();\n          var input = view.querySelector(\"input\")\n          expect(input.value).toEqual(\"old\");\n\n          input.value = \"new\";\n          dispatchEvent(input, \"input\");\n\n          expect(ctx.form.value).toEqual({\"text\": \"new\"});\n          async.done();\n        });\n      }));\n\n      it(\"should support <input> without type\", inject([TestBed, AsyncTestCompleter], (tb, async) => {\n        var ctx = new MyComp(new ControlGroup({\"text\": new Control(\"old\")}));\n\n        var t = `<div [control-group]=\"form\">\n                  <input control=\"text\">\n                </div>`;\n\n        tb.createView(MyComp, {context: ctx, html: t}).then((view) => {\n          view.detectChanges();\n          var input = view.querySelector(\"input\")\n          expect(input.value).toEqual(\"old\");\n\n          input.value = \"new\";\n          dispatchEvent(input, \"input\");\n\n          expect(ctx.form.value).toEqual({\"text\": \"new\"});\n          async.done();\n        });\n      }));\n\n      it(\"should support <textarea>\", inject([TestBed, AsyncTestCompleter], (tb, async) => {\n        var ctx = new MyComp(new ControlGroup({\"text\": new Control('old')}));\n\n        var t = `<div [control-group]=\"form\">\n                  <textarea control=\"text\"></textarea>\n                </div>`;\n\n        tb.createView(MyComp, {context: ctx, html: t}).then((view) => {\n          view.detectChanges();\n          var textarea = view.querySelector(\"textarea\")\n          expect(textarea.value).toEqual(\"old\");\n\n          textarea.value = \"new\";\n          dispatchEvent(textarea, \"input\");\n\n          expect(ctx.form.value).toEqual({\"text\": 'new'});\n          async.done();\n        });\n      }));\n\n      it(\"should support <type=checkbox>\", inject([TestBed, AsyncTestCompleter], (tb, async) => {\n        var ctx = new MyComp(new ControlGroup({\"checkbox\": new Control(true)}));\n\n        var t = `<div [control-group]=\"form\">\n                  <input type=\"checkbox\" control=\"checkbox\">\n                </div>`;\n\n        tb.createView(MyComp, {context: ctx, html: t}).then((view) => {\n          view.detectChanges();\n          var input = view.querySelector(\"input\")\n          expect(input.checked).toBe(true);\n\n          input.checked = false;\n          dispatchEvent(input, \"change\");\n\n          expect(ctx.form.value).toEqual({\"checkbox\": false});\n          async.done();\n        });\n      }));\n\n      it(\"should support <select>\", inject([TestBed, AsyncTestCompleter], (tb, async) => {\n        var ctx = new MyComp(new ControlGroup({\"city\": new Control(\"SF\")}));\n\n        var t = `<div [control-group]=\"form\">\n                    <select control=\"city\">\n                      <option value=\"SF\"></option>\n                      <option value=\"NYC\"></option>\n                    </select>\n                  </div>`;\n\n        tb.createView(MyComp, {context: ctx, html: t}).then((view) => {\n          view.detectChanges();\n          var select = view.querySelector(\"select\")\n          var sfOption = view.querySelector(\"option\")\n          expect(select.value).toEqual('SF');\n          if (DOM.supportsDOMEvents()) {\n            expect(sfOption.selected).toBe(true);\n          }\n\n          select.value = 'NYC';\n          dispatchEvent(select, \"change\");\n\n          expect(ctx.form.value).toEqual({\"city\": 'NYC'});\n          if (DOM.supportsDOMEvents()) {\n            expect(sfOption.selected).toBe(false);\n          }\n          async.done();\n        });\n      }));\n\n      it(\"should support custom value accessors\", inject([TestBed, AsyncTestCompleter], (tb, async) => {\n        var ctx = new MyComp(new ControlGroup({\"name\": new Control(\"aa\")}));\n\n        var t = `<div [control-group]=\"form\">\n                  <input type=\"text\" control=\"name\" wrapped-value>\n                </div>`;\n\n        tb.createView(MyComp, {context: ctx, html: t}).then((view) => {\n          view.detectChanges();\n          var input = view.querySelector(\"input\")\n          expect(input.value).toEqual(\"!aa!\");\n\n          input.value = \"!bb!\";\n          dispatchEvent(input, \"change\");\n\n          expect(ctx.form.value).toEqual({\"name\": \"bb\"});\n          async.done();\n        });\n      }));\n    });\n\n    describe(\"validations\", () => {\n      it(\"should use validators defined in html\",\n        inject([TestBed, AsyncTestCompleter], (tb, async) => {\n        var form = new ControlGroup({\"login\": new Control(\"aa\")});\n        var ctx = new MyComp(form);\n\n        var t = `<div [control-group]=\"form\">\n                  <input type=\"text\" control=\"login\" required>\n                 </div>`;\n\n        tb.createView(MyComp, {context: ctx, html: t}).then((view) => {\n          view.detectChanges();\n          expect(form.valid).toEqual(true);\n\n          var input = view.querySelector(\"input\");\n\n          input.value = \"\";\n          dispatchEvent(input, \"change\");\n\n          expect(form.valid).toEqual(false);\n          async.done();\n        });\n      }));\n\n      it(\"should use validators defined in the model\",\n        inject([TestBed, AsyncTestCompleter], (tb, async) => {\n        var form = new ControlGroup({\"login\": new Control(\"aa\", Validators.required)});\n        var ctx = new MyComp(form);\n\n        var t = `<div [control-group]=\"form\">\n                  <input type=\"text\" control=\"login\">\n                 </div>`;\n\n        tb.createView(MyComp, {context: ctx, html: t}).then((view) => {\n          view.detectChanges();\n          expect(form.valid).toEqual(true);\n\n          var input = view.querySelector(\"input\");\n\n          input.value = \"\";\n          dispatchEvent(input, \"change\");\n\n          expect(form.valid).toEqual(false);\n          async.done();\n        });\n      }));\n    });\n\n    describe(\"nested forms\", () => {\n      it(\"should init DOM with the given form object\",\n        inject([TestBed, AsyncTestCompleter], (tb, async) => {\n        var form = new ControlGroup({\n          \"nested\": new ControlGroup({\n            \"login\": new Control(\"value\")\n          })\n        });\n        var ctx = new MyComp(form);\n\n        var t = `<div [control-group]=\"form\">\n                  <div control-group=\"nested\">\n                    <input type=\"text\" control=\"login\">\n                  </div>\n              </div>`;\n\n        tb.createView(MyComp, {context: ctx, html: t}).then((view) => {\n          view.detectChanges();\n          var input = view.querySelector(\"input\")\n          expect(input.value).toEqual(\"value\");\n          async.done();\n        });\n      }));\n\n      it(\"should update the control group values on DOM change\",\n        inject([TestBed, AsyncTestCompleter], (tb, async) => {\n        var form = new ControlGroup({\n          \"nested\": new ControlGroup({\n            \"login\": new Control(\"value\")\n          })\n        });\n        var ctx = new MyComp(form);\n\n        var t = `<div [control-group]=\"form\">\n                    <div control-group=\"nested\">\n                      <input type=\"text\" control=\"login\">\n                    </div>\n                </div>`;\n\n        tb.createView(MyComp, {context: ctx, html: t}).then((view) => {\n          view.detectChanges();\n          var input = view.querySelector(\"input\")\n\n          input.value = \"updatedValue\";\n          dispatchEvent(input, \"change\");\n\n          expect(form.value).toEqual({\"nested\": {\"login\": \"updatedValue\"}});\n          async.done();\n        });\n      }));\n    });\n  });\n}\n\n@Component({selector: \"my-comp\"})\n@View({directives: [\n  ControlGroupDirective,\n  ControlDirective,\n  WrappedValue,\n  RequiredValidatorDirective,\n  DefaultValueAccessor,\n  CheckboxControlValueAccessor]})\nclass MyComp {\n  form:any;\n  name:string;\n\n  constructor(@Inject('form') form = null, @Inject('name') name = null) {\n    this.form = form;\n    this.name = name;\n  }\n}\n\n@Directive({\n  selector:'[wrapped-value]',\n  hostListeners: {\n    'change' : 'handleOnChange($event.target.value)'\n  },\n  hostProperties: {\n    'value' : 'value'\n  }\n})\nclass WrappedValue {\n  value;\n  onChange:Function;\n\n  constructor(cd:ControlDirective) {\n    cd.valueAccessor = this;\n  }\n\n  writeValue(value) {\n    this.value = `!${value}!`;\n  }\n\n  handleOnChange(value) {\n    this.onChange(value.substring(1, value.length - 1));\n  }\n}\n"]}