{"version":3,"sources":["router_spec.js"],"names":[],"mappings":"AAAA,KAAO,EACL,kBAAiB;AACjB,SAAO;AACP,MAAI;AACJ,GAAC;AAAG,IAAE;AACN,UAAQ;AAAG,OAAK;AAChB,OAAK;AAAG,WAAS;AAAG,mBAAiB;AACrC,UAAQ,CAAC,KAAO,oBAAkB,CAAC;AACrC,KAAO,EAAC,UAAS,CAAC,KAAO,2BAAyB,CAAC;AAEnD,KAAO,EAAC,OAAM;AAAG,eAAa,CAAC,KAAO,4BAA0B,CAAC;AACjE,KAAO,EAAC,MAAK;AAAG,WAAS,CAAC,KAAO,6BAA2B,CAAC;AAC7D,KAAO,EAAC,QAAO,CAAC,KAAO,+BAA6B,CAAC;AACrD,KAAO,EAAC,YAAW,CAAC,KAAO,oCAAkC,CAAC;AAC9D,KAAO,EAAC,WAAU,CAAC,KAAO,kCAAgC,CAAA;AAC1D,KAAO,EAAC,QAAO,CAAC,KAAO,+BAA6B,CAAC;AAErD,KAAO,EAAC,aAAY,CAAC,KAAO,qCAAmC,CAAC;AAChE,KAAO,EAAC,uBAAsB,CAAC,KAAO,uDAAqD,CAAC;AAE5F,KAAO,EAAC,IAAG,CAAC,KAAO,cAAY,CAAC;AAEhC,KAAO,SAAS,KAAG,CAAE,AAAD,CAAG;AACrB,SAAO,AAAC,CAAC,QAAO,CAAG,EAAC,AAAD,IAAM;AACvB,AAAI,MAAA,CAAA,MAAK;AACL,eAAO,CAAC;AAEZ,qBAAiB,AAAC,CAAC,CAAC,AAAD,IAAM,EACvB,QAAO,CACP,cAAY,CACZ,wBAAsB,CACtB,CAAA,IAAG,AAAC,CAAC,QAAO,CAAC,QAAQ,AAAC,CAAC,WAAU,CAAC,CAClC,CAAA,IAAG,AAAC,CAAC,MAAK,CAAC,UAAU,AAAC,CAAC,CAAC,QAAO,CAAG,CAAA,QAAO,CAAG,CAAA,QAAO,IAAM;AACvD,WAAO,IAAI,WAAS,AAAC,CAAC,QAAO,CAAG,SAAO,CAAG,SAAO,CAAG,OAAK,CAAC,CAAC;IAC7D,CAAG,EAAC,aAAY,CAAG,SAAO,CAAG,SAAO,CAAC,CAAC,CACxC,CAAC,CAAC;AAGF,aAAS,AAAC,CAAC,MAAK,AAAC,CAAC,CAAC,MAAK,CAAG,SAAO,CAAC,CAAG,EAAC,GAAE,CAAG,CAAA,GAAE,IAAM;AAClD,WAAK,EAAI,IAAE,CAAC;AACZ,aAAO,EAAI,IAAE,CAAC;IAChB,CAAC,CAAC,CAAC;AAGH,KAAC,AAAC,CAAC,gDAA+C,CAAG,CAAA,MAAK,AAAC,CAAC,CAAC,kBAAiB,CAAC,CAAG,EAAC,KAAI,IAAM;AAC3F,AAAI,QAAA,CAAA,MAAK,EAAI,CAAA,YAAW,AAAC,EAAC,CAAC;AAE3B,WAAK,OAAO,AAAC,CAAC;AAAC,aAAK,CAAG,IAAE;AAAG,kBAAU,CAAG,QAAM;AAAA,MAAE,CAAC,KAC5C,AAAC,CAAC,CAAC,CAAA,IAAM,CAAA,MAAK,eAAe,AAAC,CAAC,MAAK,CAAC,CAAC,KACtC,AAAC,CAAC,CAAC,CAAA,IAAM;AACX,aAAK,AAAC,CAAC,MAAK,IAAI,AAAC,CAAC,UAAS,CAAC,CAAC,iBAAiB,AAAC,EAAC,CAAC;AACjD,aAAK,AAAC,CAAC,QAAO,WAAW,CAAC,QAAQ,AAAC,CAAC,EAAC,CAAC,CAAC;AACvC,YAAI,KAAK,AAAC,EAAC,CAAC;MACd,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;AAGH,KAAC,AAAC,CAAC,sDAAqD,CAAG,CAAA,MAAK,AAAC,CAAC,CAAC,kBAAiB,CAAC,CAAG,EAAC,KAAI,IAAM;AACjG,AAAI,QAAA,CAAA,MAAK,EAAI,CAAA,YAAW,AAAC,EAAC,CAAC;AAE3B,WAAK,eAAe,AAAC,CAAC,MAAK,CAAC,KACtB,AAAC,CAAC,CAAC,CAAA,IAAM;AACX,aAAO,CAAA,MAAK,OAAO,AAAC,CAAC;AAAC,eAAK,CAAG,KAAG;AAAG,oBAAU,CAAG,IAAE;AAAA,QAAE,CAAC,CAAC;MACzD,CAAC,KACG,AAAC,CAAC,CAAC,CAAA,IAAM,CAAA,MAAK,SAAS,AAAC,CAAC,IAAG,CAAC,CAAC,KAC9B,AAAC,CAAC,CAAC,CAAA,IAAM;AACX,aAAK,AAAC,CAAC,MAAK,IAAI,AAAC,CAAC,UAAS,CAAC,CAAC,iBAAiB,AAAC,EAAC,CAAC;AACjD,aAAK,AAAC,CAAC,QAAO,WAAW,CAAC,QAAQ,AAAC,CAAC,CAAC,IAAG,CAAC,CAAC,CAAC;AAC3C,YAAI,KAAK,AAAC,EAAC,CAAC;MACd,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;AAEH,KAAC,AAAC,CAAC,wCAAuC,CAAG,CAAA,MAAK,AAAC,CAAC,CAAC,kBAAiB,CAAC,CAAG,EAAC,KAAI,IAAM;AACnF,AAAI,QAAA,CAAA,MAAK,EAAI,CAAA,YAAW,AAAC,EAAC,CAAC;AAE3B,WAAK,eAAe,AAAC,CAAC,MAAK,CAAC,KACtB,AAAC,CAAC,CAAC,CAAA,IAAM,CAAA,MAAK,SAAS,AAAC,CAAC,IAAG,CAAC,CAAC,KAC9B,AAAC,CAAC,CAAC,CAAA,IAAM;AACX,aAAK,AAAC,CAAC,MAAK,IAAI,AAAC,CAAC,UAAS,CAAC,CAAC,IAAI,iBAAiB,AAAC,EAAC,CAAC;AACrD,aAAO,CAAA,MAAK,OAAO,AAAC,CAAC;AAAC,eAAK,CAAG,KAAG;AAAG,oBAAU,CAAG,IAAE;AAAA,QAAE,CAAC,CAAC;MACzD,CAAC,KACG,AAAC,CAAC,CAAC,CAAA,IAAM;AACX,aAAK,AAAC,CAAC,MAAK,IAAI,AAAC,CAAC,UAAS,CAAC,CAAC,iBAAiB,AAAC,EAAC,CAAC;AACjD,YAAI,KAAK,AAAC,EAAC,CAAC;MACd,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;EACL,CAAC,CAAC;AACJ;AAAA,AAIA,IAAM,eAAa,QAAU,UAAQ;AAAG,aAAW,CAAE,CAAA,CAAE;AAAC,SAAO,CAAA,KAAI,aAAa,AAAC,CAAC,CAAA,CAAC,CAAA;EAAC;AAAA,AAAC;AA3FrF,KAAK,eAAe,AAAC,+BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cAwFzB,MAAI,KACJ,WAAS,AAAC,CAAC,YAAW,CAAC,EAzFyB;EAAC,CAAC,CAAC,CAAC;AA4FrD,OAAS,aAAW,CAAE,AAAD,CAAG;AACtB,AAAI,IAAA,CAAA,GAAE,EAAI,IAAI,eAAa,AAAC,EAAC,CAAC;AAC9B,IAAE,IAAI,AAAC,CAAC,UAAS,CAAC,YAAY,AAAC,CAAC,CAAC,CAAA,IAAM,CAAA,cAAa,QAAQ,AAAC,CAAC,IAAG,CAAC,CAAC,CAAC;AACpE,IAAE,IAAI,AAAC,CAAC,aAAY,CAAC,YAAY,AAAC,CAAC,CAAC,CAAA,IAAM,CAAA,cAAa,QAAQ,AAAC,CAAC,IAAG,CAAC,CAAC,CAAC;AACvE,IAAE,IAAI,AAAC,CAAC,eAAc,CAAC,YAAY,AAAC,CAAC,CAAC,CAAA,IAAM,CAAA,cAAa,QAAQ,AAAC,CAAC,IAAG,CAAC,CAAC,CAAC;AACzE,IAAE,IAAI,AAAC,CAAC,YAAW,CAAC,YAAY,AAAC,CAAC,CAAC,CAAA,IAAM,CAAA,cAAa,QAAQ,AAAC,CAAC,IAAG,CAAC,CAAC,CAAC;AACtE,OAAO,IAAE,CAAC;AACZ;AAAA,AAEA,IAAM,OAAK,GAAG;AACd","file":"angular2/test/router/router_spec.es6","sourcesContent":["import {\n  AsyncTestCompleter,\n  describe,\n  proxy,\n  it, iit,\n  ddescribe, expect,\n  inject, beforeEach, beforeEachBindings,\n  SpyObject} from 'angular2/test_lib';\nimport {IMPLEMENTS} from 'angular2/src/facade/lang';\n\nimport {Promise, PromiseWrapper} from 'angular2/src/facade/async';\nimport {Router, RootRouter} from 'angular2/src/router/router';\nimport {Pipeline} from 'angular2/src/router/pipeline';\nimport {RouterOutlet} from 'angular2/src/router/router_outlet';\nimport {SpyLocation} from 'angular2/src/mock/location_mock'\nimport {Location} from 'angular2/src/router/location';\n\nimport {RouteRegistry} from 'angular2/src/router/route_registry';\nimport {DirectiveMetadataReader} from 'angular2/src/core/compiler/directive_metadata_reader';\n\nimport {bind} from 'angular2/di';\n\nexport function main() {\n  describe('Router', () => {\n    var router,\n        location;\n\n    beforeEachBindings(() => [\n      Pipeline,\n      RouteRegistry,\n      DirectiveMetadataReader,\n      bind(Location).toClass(SpyLocation),\n      bind(Router).toFactory((registry, pipeline, location) => {\n        return new RootRouter(registry, pipeline, location, AppCmp);\n      }, [RouteRegistry, Pipeline, Location])\n    ]);\n\n\n    beforeEach(inject([Router, Location], (rtr, loc) => {\n      router = rtr;\n      location = loc;\n    }));\n\n\n    it('should navigate based on the initial URL state', inject([AsyncTestCompleter], (async) => {\n      var outlet = makeDummyRef();\n\n      router.config({'path': '/', 'component': 'Index' })\n        .then((_) => router.registerOutlet(outlet))\n        .then((_) => {\n          expect(outlet.spy('activate')).toHaveBeenCalled();\n          expect(location.urlChanges).toEqual([]);\n          async.done();\n        });\n    }));\n\n\n    it('should activate viewports and update URL on navigate', inject([AsyncTestCompleter], (async) => {\n      var outlet = makeDummyRef();\n\n      router.registerOutlet(outlet)\n        .then((_) => {\n          return router.config({'path': '/a', 'component': 'A' });\n        })\n        .then((_) => router.navigate('/a'))\n        .then((_) => {\n          expect(outlet.spy('activate')).toHaveBeenCalled();\n          expect(location.urlChanges).toEqual(['/a']);\n          async.done();\n        });\n    }));\n\n    it('should navigate after being configured', inject([AsyncTestCompleter], (async) => {\n      var outlet = makeDummyRef();\n\n      router.registerOutlet(outlet)\n        .then((_) => router.navigate('/a'))\n        .then((_) => {\n          expect(outlet.spy('activate')).not.toHaveBeenCalled();\n          return router.config({'path': '/a', 'component': 'A' });\n        })\n        .then((_) => {\n          expect(outlet.spy('activate')).toHaveBeenCalled();\n          async.done();\n        });\n    }));\n  });\n}\n\n@proxy\n@IMPLEMENTS(RouterOutlet)\nclass DummyOutletRef extends SpyObject {noSuchMethod(m){return super.noSuchMethod(m)}}\n\nfunction makeDummyRef() {\n  var ref = new DummyOutletRef();\n  ref.spy('activate').andCallFake((_) => PromiseWrapper.resolve(true));\n  ref.spy('canActivate').andCallFake((_) => PromiseWrapper.resolve(true));\n  ref.spy('canDeactivate').andCallFake((_) => PromiseWrapper.resolve(true));\n  ref.spy('deactivate').andCallFake((_) => PromiseWrapper.resolve(true));\n  return ref;\n}\n\nclass AppCmp {}\n"]}