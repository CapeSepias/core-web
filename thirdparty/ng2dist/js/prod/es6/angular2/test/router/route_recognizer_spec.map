{"version":3,"sources":["route_recognizer_spec.js"],"names":[],"mappings":"AAAA,KAAO,EACL,kBAAiB;AACjB,SAAO;AACP,GAAC;AAAG,IAAE;AACN,UAAQ;AAAG,OAAK;AAChB,OAAK;AAAG,WAAS;AACjB,UAAQ,CAAC,KAAO,oBAAkB,CAAC;AAErC,KAAO,EAAC,eAAc,CAAC,KAAO,uCAAqC,CAAC;AAEpE,KAAO,SAAS,KAAG,CAAE,AAAD,CAAG;AACrB,SAAO,AAAC,CAAC,iBAAgB,CAAG,EAAC,AAAD,IAAM;AAChC,AAAI,MAAA,CAAA,UAAS,CAAC;AACd,AAAI,MAAA,CAAA,OAAM,EAAI,EACZ,YAAW,CAAG,EAAE,GAAE,CAAG,IAAE,CAAE,CAC3B,CAAC;AAED,aAAS,AAAC,CAAC,CAAC,AAAD,IAAM;AACf,eAAS,EAAI,IAAI,gBAAc,AAAC,EAAC,CAAC;IACpC,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,mCAAkC,CAAG,EAAC,AAAD,IAAM;AAC5C,eAAS,UAAU,AAAC,CAAC,OAAM,CAAG,QAAM,CAAC,CAAC;AAEtC,WAAK,AAAC,CAAC,UAAS,UAAU,AAAC,CAAC,OAAM,CAAC,CAAE,CAAA,CAAC,CAAC,QAAQ,AAAC,CAAC;AAC/C,gBAAQ,CAAG,EAAE,YAAW,CAAG,EAAE,GAAE,CAAG,IAAE,CAAE,CAAE;AACxC,eAAO,CAAG,GAAC;AACX,mBAAW,CAAG,QAAM;AACpB,qBAAa,CAAG,GAAC;AAAA,MACnB,CAAC,CAAC;IACJ,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,oCAAmC,CAAG,EAAC,AAAD,IAAM;AAC7C,eAAS,UAAU,AAAC,CAAC,aAAY,CAAG,QAAM,CAAC,CAAC;AAC5C,WAAK,AAAC,CAAC,UAAS,UAAU,AAAC,CAAC,aAAY,CAAC,CAAE,CAAA,CAAC,CAAC,QAAQ,AAAC,CAAC;AACrD,gBAAQ,CAAG,QAAM;AACjB,eAAO,CAAG,EAAE,MAAK,CAAG,QAAM,CAAE;AAC5B,mBAAW,CAAG,cAAY;AAC1B,qBAAa,CAAG,GAAC;AAAA,MACnB,CAAC,CAAC;IACJ,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,wBAAuB,CAAG,EAAC,AAAD,IAAM;AACjC,eAAS,YAAY,AAAC,CAAC,IAAG,CAAG,KAAG,CAAC,CAAC;AAClC,eAAS,UAAU,AAAC,CAAC,IAAG,CAAG,QAAM,CAAC,CAAC;AACnC,AAAI,QAAA,CAAA,SAAQ,EAAI,CAAA,UAAS,UAAU,AAAC,CAAC,IAAG,CAAC,CAAC;AAC1C,WAAK,AAAC,CAAC,SAAQ,OAAO,CAAC,KAAK,AAAC,CAAC,CAAA,CAAC,CAAC;AAChC,WAAK,AAAC,CAAC,SAAQ,CAAE,CAAA,CAAC,CAAC,QAAQ,AAAC,CAAC;AAC3B,gBAAQ,CAAG,QAAM;AACjB,eAAO,CAAG,GAAC;AACX,mBAAW,CAAG,KAAG;AACjB,qBAAa,CAAG,GAAC;AAAA,MACnB,CAAC,CAAC;IACJ,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,sBAAqB,CAAG,EAAC,AAAD,IAAM;AAC/B,eAAS,UAAU,AAAC,CAAC,iBAAgB,CAAG,QAAM,CAAG,OAAK,CAAC,CAAC;AACxD,WAAK,AAAC,CAAC,UAAS,SAAS,AAAC,CAAC,MAAK,CAAG,EAAC,MAAK,CAAI,QAAM,CAAC,CAAC,CAAC,QAAQ,AAAC,CAAC,iBAAgB,CAAC,CAAC;IACpF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAAA","file":"angular2/test/router/route_recognizer_spec.es6","sourcesContent":["import {\n  AsyncTestCompleter,\n  describe,\n  it, iit,\n  ddescribe, expect,\n  inject, beforeEach,\n  SpyObject} from 'angular2/test_lib';\n\nimport {RouteRecognizer} from 'angular2/src/router/route_recognizer';\n\nexport function main() {\n  describe('RouteRecognizer', () => {\n    var recognizer;\n    var handler = {\n      'components': { 'a': 'b' }\n    };\n\n    beforeEach(() => {\n      recognizer = new RouteRecognizer();\n    });\n\n    it('should work with a static segment', () => {\n      recognizer.addConfig('/test', handler);\n\n      expect(recognizer.recognize('/test')[0]).toEqual({\n        'handler': { 'components': { 'a': 'b' } },\n        'params': {},\n        'matchedUrl': '/test',\n        'unmatchedUrl': ''\n      });\n    });\n\n    it('should work with a dynamic segment', () => {\n      recognizer.addConfig('/user/:name', handler);\n      expect(recognizer.recognize('/user/brian')[0]).toEqual({\n        'handler': handler,\n        'params': { 'name': 'brian' },\n        'matchedUrl': '/user/brian',\n        'unmatchedUrl': ''\n      });\n    });\n\n    it('should allow redirects', () => {\n      recognizer.addRedirect('/a', '/b');\n      recognizer.addConfig('/b', handler);\n      var solutions = recognizer.recognize('/a');\n      expect(solutions.length).toBe(1);\n      expect(solutions[0]).toEqual({\n        'handler': handler,\n        'params': {},\n        'matchedUrl': '/b',\n        'unmatchedUrl': ''\n      });\n    });\n\n    it('should generate URLs', () => {\n      recognizer.addConfig('/app/user/:name', handler, 'user');\n      expect(recognizer.generate('user', {'name' : 'misko'})).toEqual('/app/user/misko');\n    });\n  });\n}\n"]}