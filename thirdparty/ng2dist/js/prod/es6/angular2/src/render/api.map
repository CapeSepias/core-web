{"version":3,"sources":["api.js"],"names":[],"mappings":"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","file":"angular2/src/render/api.es6","sourcesContent":["import {isPresent} from 'angular2/src/facade/lang';\nimport {Promise} from 'angular2/src/facade/async';\nimport {List, Map} from 'angular2/src/facade/collection';\nimport {ASTWithSource} from 'angular2/change_detection';\n\n/**\n * General notes:\n *\n * The methods for creating / destroying views in this API are used in the AppViewHydrator\n * and RenderViewHydrator as well.\n *\n * We are already parsing expressions on the render side:\n * - this makes the ElementBinders more compact\n *   (e.g. no need to distinguish interpolations from regular expressions from literals)\n * - allows to retrieve which properties should be accessed from the event\n *   by looking at the expression\n * - we need the parse at least for the `template` attribute to match\n *   directives in it\n * - render compiler is not on the critical path as\n *   its output will be stored in precompiled templates.\n */\nexport class EventBinding {\n  fullName: string; // name/target:name, e.g \"click\", \"window:resize\"\n  source: ASTWithSource;\n\n  constructor(fullName :string, source: ASTWithSource) {\n    this.fullName = fullName;\n    this.source = source;\n  }\n}\n\nexport class ElementBinder {\n  index:number;\n  parentIndex:number;\n  distanceToParent:number;\n  directives:List<DirectiveBinder>;\n  nestedProtoView:ProtoViewDto;\n  propertyBindings: Map<string, ASTWithSource>;\n  variableBindings: Map<string, ASTWithSource>;\n  // Note: this contains a preprocessed AST\n  // that replaced the values that should be extracted from the element\n  // with a local name\n  eventBindings: List<EventBinding>;\n  textBindings: List<ASTWithSource>;\n  readAttributes: Map<string, string>;\n\n  constructor({\n    index, parentIndex, distanceToParent,\n    directives, nestedProtoView,\n    propertyBindings, variableBindings,\n    eventBindings, textBindings,\n    readAttributes\n  }) {\n    this.index = index;\n    this.parentIndex = parentIndex;\n    this.distanceToParent = distanceToParent;\n    this.directives = directives;\n    this.nestedProtoView = nestedProtoView;\n    this.propertyBindings = propertyBindings;\n    this.variableBindings = variableBindings;\n    this.eventBindings = eventBindings;\n    this.textBindings = textBindings;\n    this.readAttributes = readAttributes;\n  }\n}\n\nexport class DirectiveBinder {\n  // Index into the array of directives in the View instance\n  directiveIndex:any;\n  propertyBindings: Map<string, ASTWithSource>;\n  // Note: this contains a preprocessed AST\n  // that replaced the values that should be extracted from the element\n  // with a local name\n  eventBindings: List<EventBinding>;\n  hostPropertyBindings: Map<string, ASTWithSource>;\n  constructor({\n    directiveIndex, propertyBindings, eventBindings, hostPropertyBindings\n  }) {\n    this.directiveIndex = directiveIndex;\n    this.propertyBindings = propertyBindings;\n    this.eventBindings = eventBindings;\n    this.hostPropertyBindings = hostPropertyBindings;\n  }\n}\n\nexport class ProtoViewDto {\n  // A view that contains the host element with bound\n  // component directive.\n  // Contains a view of type #COMPONENT_VIEW_TYPE.\n  static get HOST_VIEW_TYPE() { return 0; }\n  // The view of the component\n  // Can contain 0 to n views of type #EMBEDDED_VIEW_TYPE\n  static get COMPONENT_VIEW_TYPE() { return 1; }\n  // A view that is embedded into another View via a <template> element\n  // inside of a component view\n  static get EMBEDDED_VIEW_TYPE() { return 1; }\n\n  render: RenderProtoViewRef;\n  elementBinders:List<ElementBinder>;\n  variableBindings: Map<string, string>;\n  type: number;\n\n  constructor({render, elementBinders, variableBindings, type}={}) {\n    this.render = render;\n    this.elementBinders = elementBinders;\n    this.variableBindings = variableBindings;\n    this.type = type;\n  }\n}\n\nexport class DirectiveMetadata {\n  static get DIRECTIVE_TYPE() { return 0; }\n  static get COMPONENT_TYPE() { return 1; }\n  id:any;\n  selector:string;\n  compileChildren:boolean;\n  hostListeners:Map<string, string>;\n  hostProperties:Map<string, string>;\n  properties:Map<string, string>;\n  readAttributes:List<string>;\n  type:number;\n  constructor({id, selector, compileChildren, hostListeners, hostProperties, properties, readAttributes, type}) {\n    this.id = id;\n    this.selector = selector;\n    this.compileChildren = isPresent(compileChildren) ? compileChildren : true;\n    this.hostListeners = hostListeners;\n    this.hostProperties = hostProperties;\n    this.properties = properties;\n    this.readAttributes = readAttributes;\n    this.type = type;\n  }\n}\n\n// An opaque reference to a RenderProtoView\nexport class RenderProtoViewRef {}\n\n// An opaque reference to a RenderView\nexport class RenderViewRef {}\n\nexport class RenderViewContainerRef {\n  view:RenderViewRef;\n  elementIndex:number;\n  constructor(view:RenderViewRef, elementIndex: number) {\n    this.view = view;\n    this.elementIndex = elementIndex;\n  }\n}\n\nexport class ViewDefinition {\n  componentId: string;\n  absUrl: string;\n  template: string;\n  directives: List<DirectiveMetadata>;\n\n  constructor({componentId, absUrl, template, directives}) {\n    this.componentId = componentId;\n    this.absUrl = absUrl;\n    this.template = template;\n    this.directives = directives;\n  }\n}\n\nexport class Renderer {\n  /**\n   * Creats a ProtoViewDto that contains a single nested component with the given componentId.\n   */\n  createHostProtoView(componentId):Promise<ProtoViewDto> { return null; }\n\n  /**\n   * Creats a ProtoViewDto for a component that will use an imperative View using the given\n   * renderer.\n   * Note: Rigth now, the renderer argument is ignored, but will be used in the future to define\n   * a custom handler.\n   */\n  createImperativeComponentProtoView(rendererId):Promise<ProtoViewDto> { return null; }\n\n  /**\n   * Compiles a single RenderProtoView. Non recursive so that\n   * we don't need to serialize all possible components over the wire,\n   * but only the needed ones based on previous calls.\n   */\n  compile(template:ViewDefinition):Promise<ProtoViewDto> { return null; }\n\n  /**\n   * Sets the preset nested components,\n   * which will be instantiated when this protoView is instantiated.\n   * Note: We can't create new ProtoViewRefs here as we need to support cycles / recursive components.\n   * @param {List<RenderProtoViewRef>} protoViewRefs\n   *    RenderProtoView for every element with a component in this protoView or in a view container's protoView\n   */\n  mergeChildComponentProtoViews(protoViewRef:RenderProtoViewRef, componentProtoViewRefs:List<RenderProtoViewRef>) { return null; }\n\n  /**\n   * Creates a view and inserts it into a ViewContainer.\n   * @param {RenderViewContainerRef} viewContainerRef\n   * @param {RenderProtoViewRef} protoViewRef A RenderProtoViewRef of type ProtoViewDto.HOST_VIEW_TYPE or ProtoViewDto.EMBEDDED_VIEW_TYPE\n   * @param {number} atIndex\n   * @return {List<RenderViewRef>} the view and all of its nested child component views\n   */\n  createViewInContainer(vcRef:RenderViewContainerRef, atIndex:number, protoViewRef:RenderProtoViewRef):List<RenderViewRef> { return null; }\n\n  /**\n   * Destroys the view in the given ViewContainer\n   */\n  destroyViewInContainer(vcRef:RenderViewContainerRef, atIndex:number):void {}\n\n  /**\n   * Inserts a detached view into a viewContainer.\n   */\n  insertViewIntoContainer(vcRef:RenderViewContainerRef, atIndex:number, view:RenderViewRef):void {}\n\n  /**\n   * Detaches a view from a container so that it can be inserted later on\n   */\n  detachViewFromContainer(vcRef:RenderViewContainerRef, atIndex:number):void {}\n\n  /**\n   * Creates a view and\n   * installs it as a shadow view for an element.\n   *\n   * Note: only allowed if there is a dynamic component directive at this place.\n   * @param {RenderViewRef} hostView\n   * @param {number} elementIndex\n   * @param {RenderProtoViewRef} componentProtoViewRef A RenderProtoViewRef of type ProtoViewDto.COMPONENT_VIEW_TYPE\n   * @return {List<RenderViewRef>} the view and all of its nested child component views\n   */\n  createDynamicComponentView(hostViewRef:RenderViewRef, elementIndex:number, componentProtoViewRef:RenderProtoViewRef):List<RenderViewRef> { return null; }\n\n  /**\n   * Destroys the component view at the given index\n   *\n   * Note: only allowed if there is a dynamic component directive at this place.\n   */\n  destroyDynamicComponentView(hostViewRef:RenderViewRef, elementIndex:number):void {}\n\n  /**\n   * Creates a host view that includes the given element.\n   * @param {RenderViewRef} parentViewRef (might be null)\n   * @param {any} hostElementSelector element or css selector for the host element\n   * @param {RenderProtoViewRef} hostProtoView a RenderProtoViewRef of type ProtoViewDto.HOST_VIEW_TYPE\n   * @return {List<RenderViewRef>} the view and all of its nested child component views\n   */\n  createInPlaceHostView(parentViewRef:RenderViewRef, hostElementSelector, hostProtoViewRef:RenderProtoViewRef):List<RenderViewRef> { return null; }\n\n  /**\n   * Destroys the given host view in the given parent view.\n   */\n  destroyInPlaceHostView(parentViewRef:RenderViewRef, hostViewRef:RenderViewRef):void {}\n\n  /**\n   * Sets a property on an element.\n   * Note: This will fail if the property was not mentioned previously as a host property\n   * in the View.\n   */\n  setElementProperty(view:RenderViewRef, elementIndex:number, propertyName:string, propertyValue:any):void {}\n\n  /**\n   * This will set the value for a text node.\n   * Note: This needs to be separate from setElementProperty as we don't have ElementBinders\n   * for text nodes in the RenderProtoView either.\n   */\n  setText(view:RenderViewRef, textNodeIndex:number, text:string):void {}\n\n  /**\n   * Sets the dispatcher for all events that have been defined in the template or in directives\n   * in the given view.\n   */\n  setEventDispatcher(viewRef:RenderViewRef, dispatcher:any/*EventDispatcher*/):void {}\n\n  /**\n   * To be called at the end of the VmTurn so the API can buffer calls\n   */\n  flush():void {}\n}\n\n\n/**\n * A dispatcher for all events happening in a view.\n */\nexport class EventDispatcher {\n  /**\n   * Called when an event was triggered for a on-* attribute on an element.\n   * @param {Map<string, any>} locals Locals to be used to evaluate the\n   *   event expressions\n   */\n  dispatchEvent(\n    elementIndex:number, eventName:string, locals:Map<string, any>\n  ):void {}\n}\n"]}